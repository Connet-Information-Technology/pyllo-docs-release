:py:mod:`pyllo.core.api`
========================

.. py:module:: pyllo.core.api

.. autoapi-nested-parse::

   Application programming interfaces for interaction with pyllo core.

   .. versionadded:: 1.0.0



Module Contents
---------------


.. list-table:: Classes
   :header-rows: 0
   :widths: auto
   :class: summarytable

   * - :py:obj:`Shortcut <pyllo.core.api.Shortcut>`
     - \-
   * - :py:obj:`NoDefault <pyllo.core.api.NoDefault>`
     - No default stub.
   * - :py:obj:`IConfigurationAccessor <pyllo.core.api.IConfigurationAccessor>`
     - Access options interface.
   * - :py:obj:`IConfigurationObserver <pyllo.core.api.IConfigurationObserver>`
     - Configuration observe interface.
   * - :py:obj:`IConfigurationMixin <pyllo.core.api.IConfigurationMixin>`
     - This mixin inherits IConfigurationObserver's feature and
   * - :py:obj:`IPluginObserver <pyllo.core.api.IPluginObserver>`
     - This mixin interface enables a class to receive notifications when a plugin
   * - :py:obj:`IPlugin <pyllo.core.api.IPlugin>`
     - Functional interface of plugin.
   * - :py:obj:`IDockablePlugin <pyllo.core.api.IDockablePlugin>`
     - A Pyllo plugin to enhance functionality with a dockable widget.
   * - :py:obj:`IUndoable <pyllo.core.api.IUndoable>`
     - Undoable behavior interface




.. py:class:: Shortcut(qshort: qtpy.QtWidgets.QShortcut, namespace: pyllo.core.dtype.ShortcutNamespace, name: pyllo.core.dtype.ShortcutName)

   ..    ..    .. 


.. py:class:: NoDefault

   Bases: :py:obj:`object`

   No default stub.

   .. versionadded:: 1.0.0

   ..    ..    .. 


.. py:class:: IConfigurationAccessor

   Bases: :py:obj:`object`

   Access options interface.

   .. versionadded:: 1.0.0

   ..    ..    ..    .. .. py:attribute:: CONF_SECTION
      :type: pyllo.core.dtype.SectionName

      Name of the configuration section that's going to be
      used to record the object's permanent data in Pyllo
      config system.

      .. versionadded:: 1.0.0


   .. 
   .. rubric:: Overview

   
   .. list-table:: Attributes
      :header-rows: 0
      :widths: auto
      :class: summarytable

      * - :py:obj:`CONF_SECTION <pyllo.core.api.IConfigurationAccessor.CONF_SECTION>`
        - Name of the configuration section that's going to be



   .. list-table:: Methods
      :header-rows: 0
      :widths: auto
      :class: summarytable

      * - :py:obj:`getConf <pyllo.core.api.IConfigurationAccessor.getConf>`\ (option, default, section)
        - Get an option from the Pyllo configuration system.
      * - :py:obj:`getConfOptions <pyllo.core.api.IConfigurationAccessor.getConfOptions>`\ (section)
        - Get all options from the given section.
      * - :py:obj:`setConf <pyllo.core.api.IConfigurationAccessor.setConf>`\ (option, value, section, recursiveNotification)
        - Set an option in the Pyllo configuration system.
      * - :py:obj:`removeConf <pyllo.core.api.IConfigurationAccessor.removeConf>`\ (option, section)
        - Remove an option in the Pyllo configuration system.
      * - :py:obj:`getConfDefault <pyllo.core.api.IConfigurationAccessor.getConfDefault>`\ (option, section)
        - Get an option default value in the Pyllo configuration system.
      * - :py:obj:`getShortcut <pyllo.core.api.IConfigurationAccessor.getShortcut>`\ (name, namespace)
        - Get a shortcut sequence stored under the given name and
      * - :py:obj:`createMethodShortcut <pyllo.core.api.IConfigurationAccessor.createMethodShortcut>`\ (action, namespace, name, parent, context)
        - Create a Shortcut namedtuple for a widget.



   .. rubric:: Attributes
   .. py:attribute:: CONF_SECTION
      :type: pyllo.core.dtype.SectionName

      Name of the configuration section that's going to be
      used to record the object's permanent data in Pyllo
      config system.

      .. versionadded:: 1.0.0




   .. rubric:: Methods
   .. py:method:: getConf(option: pyllo.core.dtype.OptionName, default: Union[NoDefault, pyllo.core.dtype.BasicTypes] = NoDefault, section: Optional[pyllo.core.dtype.SectionName] = None)

      Get an option from the Pyllo configuration system.

      Parameters
      ----------
      option: t.OptionName
          Name/Tuple path of the option to get its value from.
      default: Union[NoDefault, BasicTypes]
          Fallback value to return if the option is not found on the
          configuration system.
      section: str
          Section in the configuration system, e.g. `shortcuts`.
          If None, then the value of `CONF_SECTION` is used.

      Returns
      -------
      value: BasicTypes
          Value of the option in the configuration section.

      Raises
      ------
      AttributeError
          If the section does not exist in the configuration.


      .. versionadded:: 1.0.0


   .. py:method:: getConfOptions(section: Optional[pyllo.core.dtype.SectionName] = None)

      Get all options from the given section.

      Parameters
      ----------
      section: Optional[str]
          Section in the configuration system, e.g. `shortcuts`.
          If None, then the value of `CONF_SECTION` is used.

      Returns
      -------
      values: BasicTypes
          Values of the option in the configuration section.

      Raises
      ------
      AttributeError
          If the section does not exist in the configuration.


      .. versionadded:: 1.0.0


   .. py:method:: setConf(option: pyllo.core.dtype.OptionName, value: pyllo.core.dtype.BasicTypes, section: Optional[pyllo.core.dtype.SectionName] = None, recursiveNotification: bool = True)

      Set an option in the Pyllo configuration system.

      Parameters
      ----------
      option: t.OptionName
          Name/Tuple path of the option to set its value.
      value: BasicTypes
          Value to set on the configuration system.
      section: Optional[str]
          Section in the configuration system, e.g. `shortcuts`.
          If None, then the value of `CONF_SECTION` is used.
      recursiveNotification: bool
          If True, all objects that observe all changes on the
          configuration section and objects that observe partial
          tuple paths are notified. For example if the option `opt` of
          section `sec` changes, then the observers for section `sec`
          are notified.
          Likewise, if the option `(a, b, c)` changes, then observers
          for `(a, b, c)`, `(a, b)` and a are notified as well.


      .. versionadded:: 1.0.0


   .. py:method:: removeConf(option: pyllo.core.dtype.OptionName, section: Optional[pyllo.core.dtype.SectionName] = None)

      Remove an option in the Pyllo configuration system.

      Parameters
      ----------
      option: t.OptionName
          Name/Tuple path of the option to remove its value.
      section: Optional[str]
          Section in the configuration system, e.g. `shortcuts`.
          If None, then the value of `CONF_SECTION` is used.


      .. versionadded:: 1.0.0


   .. py:method:: getConfDefault(option: pyllo.core.dtype.OptionName, section: Optional[pyllo.core.dtype.SectionName] = None) -> pyllo.core.dtype.BasicTypes

      Get an option default value in the Pyllo configuration system.

      Parameters
      ----------
      option: t.OptionName
          Name/Tuple path of the option to remove its value.
      section: Optional[str]
          Section in the configuration system, e.g. `shortcuts`.
          If None, then the value of `CONF_SECTION` is used.

      Returns
      -------
      value: BasicTypes/NoDefault
          Value of the option in the configuration section.

      Raises
      ------
      AttributeError
          If the section does not exist in the configuration.


      .. versionadded:: 1.0.0


   .. py:method:: getShortcut(name: pyllo.core.dtype.ShortcutName, namespace: Optional[pyllo.core.dtype.SectionName] = None) -> pyllo.core.dtype.KeySequenceString

      Get a shortcut sequence stored under the given name and
      namespace.

      Parameters
      ----------
      name: str
          Key identifier under which the shortcut is stored.
      namespace: Optional[str]
          Name of the context (plugin) where the shortcut was defined.

      Returns
      -------
      shortcut: str
          Key sequence of the shortcut.


      .. versionadded:: 1.0.0


   .. py:method:: createMethodShortcut(action: Callable, namespace: pyllo.core.dtype.ShortcutNamespace, name: pyllo.core.dtype.ShortcutName, parent: qtpy.QtWidgets.QWidget, context=Qt.ShortcutContext.WidgetShortcut) -> Shortcut

      Create a Shortcut namedtuple for a widget.

      The data contained in this tuple will be registered in our
      shortcuts preferences page.

      Parameters
      ----------
      method: Callable
          Callable(like lambda) that will use the shortcut.
      name: str
          Key identifier under which the shortcut is stored.
      parent: QWidget
          Parent widget for the shortcut.
      namespace: Optional[str]
          Name of the context (plugin) where the shortcut was defined.

      Returns
      -------
      shortcut: Shortcut
          Namedtuple with the information of the shortcut as used for the
          shortcuts preferences page.


      .. versionadded:: 1.0.0





.. py:class:: IConfigurationObserver

   Bases: :py:obj:`object`

   Configuration observe interface.

   This interface doesn't contain any methods but indicates
   that any class implements this can use :func:`onConfChange`
   decorator to set a observation callback function on specific
   option or whole section.

   .. versionadded:: 1.0.0

   ..    ..    ..    .. .. py:attribute:: CONF_SECTION
      :type: pyllo.core.dtype.SectionName

      Name of the configuration section that's going to be
      used to record the object's permanent data in Pyllo
      config system.

      .. versionadded:: 1.0.0


   .. 
   .. rubric:: Overview

   
   .. list-table:: Attributes
      :header-rows: 0
      :widths: auto
      :class: summarytable

      * - :py:obj:`CONF_SECTION <pyllo.core.api.IConfigurationObserver.CONF_SECTION>`
        - Name of the configuration section that's going to be





   .. rubric:: Attributes
   .. py:attribute:: CONF_SECTION
      :type: pyllo.core.dtype.SectionName

      Name of the configuration section that's going to be
      used to record the object's permanent data in Pyllo
      config system.

      .. versionadded:: 1.0.0







.. py:class:: IConfigurationMixin

   Bases: :py:obj:`IConfigurationObserver`

   This mixin inherits IConfigurationObserver's feature and
   IConfigurationAccessor's feature. Then enhance with
   1. `CONF_NAME_MAP`:
       Which split configuration into multiple .ini files
   2. `CONF_DEFAULTS`:
       Which adds additional defaults to :attr:`pyllo.config.main.DEFAULTS`
       at plugin integrating phase.
   3. `CONF_FILE`:
       Instruct config manager to read from and write to separate init files
       under sub folder named "{CONF_SECTION}" in pyllo configuration folder.
   4. `CONF_VERSION`:
       Configuration version.

   .. attention:: Requires target object defines :attr:`CONF_SECTION`
       :attr:`CONF_FILE`, :attr:`CONF_DEFAULTS`, :attr:`CONF_NAME_MAP`,
       :attr:`CONF_VERSION`

   .. versionadded:: 1.0.0

   ..    ..    ..    .. .. py:attribute:: CONF_FILE
      :value: True

      Use a separate configuration file for the plugin.

      .. versionadded:: 1.0.0


   ..    .. .. py:attribute:: CONF_DEFAULTS
      :type: pyllo.core.dtype.Configurations

      Define configuration defaults if using a separate file.
      List of tuples, with the first item in the tuple being the section
      name and the second item being the default options dictionary.

      .. example::
          
          CONF_DEFAULTS = [
              ('section-name', {'option-1': 'some-value',
                                'option-2': True,}),
              ('another-section-name', {'option-3': 'some-other-value',
                                        'option-4': [1, 2, 3],}),
          ]
          
      .. versionadded:: 1.0.0


   ..    .. .. py:attribute:: CONF_NAME_MAP
      :type: pyllo.core.dtype.FileConfigNameMap

      Define configuration name map for plugin to split configuration among 
      several files. See Pyllo/config/main.py

      .. versionadded:: 1.0.0


   ..    .. .. py:attribute:: CONF_VERSION

      Define configuration version if using a separate file

      IMPORTANT NOTES:
      1. If you want to *change* the default value of a current option, you
         need to do a MINOR update in config version, e.g. from 3.0.0 to 3.1.0
      2. If you want to *remove* options that are no longer needed or if you
         want to *rename* options, then you need to do a MAJOR update in
         version, e.g. from 3.0.0 to 4.0.0
      3. You don't need to touch this value if you're just adding a new option

      .. versionadded:: 1.0.0


   .. 
   .. rubric:: Overview

   
   .. list-table:: Attributes
      :header-rows: 0
      :widths: auto
      :class: summarytable

      * - :py:obj:`CONF_FILE <pyllo.core.api.IConfigurationMixin.CONF_FILE>`
        - Use a separate configuration file for the plugin.
      * - :py:obj:`CONF_DEFAULTS <pyllo.core.api.IConfigurationMixin.CONF_DEFAULTS>`
        - Define configuration defaults if using a separate file.
      * - :py:obj:`CONF_NAME_MAP <pyllo.core.api.IConfigurationMixin.CONF_NAME_MAP>`
        - Define configuration name map for plugin to split configuration among
      * - :py:obj:`CONF_VERSION <pyllo.core.api.IConfigurationMixin.CONF_VERSION>`
        - Define configuration version if using a separate file





   .. rubric:: Attributes
   .. py:attribute:: CONF_FILE
      :value: True

      Use a separate configuration file for the plugin.

      .. versionadded:: 1.0.0


   .. py:attribute:: CONF_DEFAULTS
      :type: pyllo.core.dtype.Configurations

      Define configuration defaults if using a separate file.
      List of tuples, with the first item in the tuple being the section
      name and the second item being the default options dictionary.

      .. example::
          
          CONF_DEFAULTS = [
              ('section-name', {'option-1': 'some-value',
                                'option-2': True,}),
              ('another-section-name', {'option-3': 'some-other-value',
                                        'option-4': [1, 2, 3],}),
          ]
          
      .. versionadded:: 1.0.0


   .. py:attribute:: CONF_NAME_MAP
      :type: pyllo.core.dtype.FileConfigNameMap

      Define configuration name map for plugin to split configuration among 
      several files. See Pyllo/config/main.py

      .. versionadded:: 1.0.0


   .. py:attribute:: CONF_VERSION

      Define configuration version if using a separate file

      IMPORTANT NOTES:
      1. If you want to *change* the default value of a current option, you
         need to do a MINOR update in config version, e.g. from 3.0.0 to 3.1.0
      2. If you want to *remove* options that are no longer needed or if you
         want to *rename* options, then you need to do a MAJOR update in
         version, e.g. from 3.0.0 to 4.0.0
      3. You don't need to touch this value if you're just adding a new option

      .. versionadded:: 1.0.0







.. py:class:: IPluginObserver

   Bases: :py:obj:`object`

   This mixin interface enables a class to receive notifications when a plugin
   is available, by registering methods using the
   :func:`onPluginAvailable` decorator, and receive notification when a plugin
   is teardown, by registering methods using the
   :func:`onPluginTearDown` decorator.

   When any of the requested plugins is ready, the corresponding registered
   method is called.


   .. attention:: This mixin will only operate over the plugin requirements
       listed under `REQUIRES` and `OPTIONAL` class constants.

   .. versionadded:: 1.0.0

   ..    ..    ..    .. .. py:attribute:: NAME
      :type: pyllo.core.dtype.PluginName

      Name of the plugin that will be used to refer to it.
      This name must be unique and will only be loaded once.

      .. versionadded:: 1.0.0


   ..    .. .. py:attribute:: VERSION
      :value: '0.0.0'

      Plugin version.

      .. versionadded:: 1.0.0


   ..    .. .. py:attribute:: REQUIRES
      :type: List[pyllo.core.dtype.PluginName]
      :value: []

      List of required plugin dependencies.
      Example: [Plugins.Plots, Plugins.IPythonConsole, ...].
      These values are defined in the `Plugins` class present in this file.
      If a plugin is using a widget from another plugin, that other
      must be declared as a required dependency.

      .. versionadded:: 1.0.0


   ..    .. .. py:attribute:: OPTIONAL
      :type: List[pyllo.core.dtype.PluginName]
      :value: []

      List of optional plugin dependencies.
      Example: [Plugins.Plots, Plugins.IPythonConsole, ...].
      These values are defined in the `Plugins` class present in this file.
      A plugin might be performing actions when connecting to other plugins,
      but the main functionality of the plugin does not depend on other
      plugins. For example, the Help plugin might render information from
      the Editor or from the Console or from another source, but it does not
      depend on either of those plugins.
      Methods in the plugin that make use of optional plugins must check
      existence before using those methods or applying signal connections.

      .. versionadded:: 1.0.0


   .. 
   .. rubric:: Overview

   
   .. list-table:: Attributes
      :header-rows: 0
      :widths: auto
      :class: summarytable

      * - :py:obj:`NAME <pyllo.core.api.IPluginObserver.NAME>`
        - Name of the plugin that will be used to refer to it.
      * - :py:obj:`VERSION <pyllo.core.api.IPluginObserver.VERSION>`
        - Plugin version.
      * - :py:obj:`REQUIRES <pyllo.core.api.IPluginObserver.REQUIRES>`
        - List of required plugin dependencies.
      * - :py:obj:`OPTIONAL <pyllo.core.api.IPluginObserver.OPTIONAL>`
        - List of optional plugin dependencies.



   .. list-table:: Methods
      :header-rows: 0
      :widths: auto
      :class: summarytable

      * - :py:obj:`onPluginAvailable <pyllo.core.api.IPluginObserver.onPluginAvailable>`\ (plugin)
        - :summarylabel:`abc` Handle plugin availability and redirect it to plugin-specific
      * - :py:obj:`onPluginTeardown <pyllo.core.api.IPluginObserver.onPluginTeardown>`\ (plugin)
        - :summarylabel:`abc` Handle plugin teardown and redirect it to plugin-specific teardown
      * - :py:obj:`onPluginFocusChanged <pyllo.core.api.IPluginObserver.onPluginFocusChanged>`\ (previousWidget, previousPlugin, currentWidget, currentPlugin)
        - Called when widget focus changed.



   .. rubric:: Attributes
   .. py:attribute:: NAME
      :type: pyllo.core.dtype.PluginName

      Name of the plugin that will be used to refer to it.
      This name must be unique and will only be loaded once.

      .. versionadded:: 1.0.0


   .. py:attribute:: VERSION
      :value: '0.0.0'

      Plugin version.

      .. versionadded:: 1.0.0


   .. py:attribute:: REQUIRES
      :type: List[pyllo.core.dtype.PluginName]
      :value: []

      List of required plugin dependencies.
      Example: [Plugins.Plots, Plugins.IPythonConsole, ...].
      These values are defined in the `Plugins` class present in this file.
      If a plugin is using a widget from another plugin, that other
      must be declared as a required dependency.

      .. versionadded:: 1.0.0


   .. py:attribute:: OPTIONAL
      :type: List[pyllo.core.dtype.PluginName]
      :value: []

      List of optional plugin dependencies.
      Example: [Plugins.Plots, Plugins.IPythonConsole, ...].
      These values are defined in the `Plugins` class present in this file.
      A plugin might be performing actions when connecting to other plugins,
      but the main functionality of the plugin does not depend on other
      plugins. For example, the Help plugin might render information from
      the Editor or from the Console or from another source, but it does not
      depend on either of those plugins.
      Methods in the plugin that make use of optional plugins must check
      existence before using those methods or applying signal connections.

      .. versionadded:: 1.0.0




   .. rubric:: Methods
   .. py:method:: onPluginAvailable(plugin: pyllo.core.dtype.PluginName)
      :abstractmethod:

      Handle plugin availability and redirect it to plugin-specific
      startup handlers.

      Parameters
      ----------
      plugin: str
          Name of the plugin that was notified as available.


      .. versionadded:: 1.0.0


   .. py:method:: onPluginTeardown(plugin: pyllo.core.dtype.PluginName)
      :abstractmethod:

      Handle plugin teardown and redirect it to plugin-specific teardown
      handlers.

      Parameters
      ----------
      plugin: str
          Name of the plugin that is going through its teardown process.


      .. versionadded:: 1.0.0


   .. py:method:: onPluginFocusChanged(previousWidget: qtpy.QtWidgets.QWidget, previousPlugin: pyllo.core.dtype.PluginName, currentWidget: qtpy.QtWidgets.QWidget, currentPlugin: pyllo.core.dtype.PluginName)

      Called when widget focus changed.





.. py:class:: IPlugin

   Bases: :py:obj:`pyllo.ui.api.IActionMixin`, :py:obj:`IConfigurationMixin`, :py:obj:`IPluginObserver`

   Functional interface of plugin.

   .. caution:: This interface is just an exposure of public methods for
       development usage.
       You should not directly implement this interface.
       Please subclass PylloPlugin which already implement this interface.
   .. seealso:: :class:`pyllo.core.runtime.spi.PylloPlugin`
   .. versionadded:: 1.0.0

   ..    ..    ..    .. .. py:attribute:: NAME
      :type: pyllo.core.dtype.PluginName

      Name of the plugin that will be used to refer to it.
      This name must be unique and will only be loaded once.

      .. versionadded:: 1.0.0


   ..    .. .. py:attribute:: VERSION
      :value: '0.0.0'

      Plugin version.

      .. versionadded:: 1.0.0


   ..    .. .. py:attribute:: REQUIRES
      :type: List[pyllo.core.dtype.PluginName]
      :value: []

      List of required plugin dependencies.
      Example: [Plugins.Plots, Plugins.IPythonConsole, ...].
      These values are defined in the `Plugins` class present in this file.
      If a plugin is using a widget from another plugin, that other
      must be declared as a required dependency.

      .. versionadded:: 1.0.0


   ..    .. .. py:attribute:: OPTIONAL
      :type: List[pyllo.core.dtype.PluginName]
      :value: []

      List of optional plugin dependencies.
      Example: [Plugins.Plots, Plugins.IPythonConsole, ...].
      These values are defined in the `Plugins` class present in this file.
      A plugin might be performing actions when connecting to other plugins,
      but the main functionality of the plugin does not depend on other
      plugins. For example, the Help plugin might render information from
      the Editor or from the Console or from another source, but it does not
      depend on either of those plugins.
      Methods in the plugin that make use of optional plugins must check
      existence before using those methods or applying signal connections.

      .. versionadded:: 1.0.0


   ..    .. .. py:attribute:: CONTAINER_CLASS
      :type: PluginMainContainer

      This must subclass a `PluginMainContainer` for non dockable plugins that
      create a widget, like a status bar widget, a toolbar, a menu, etc.
      For non dockable plugins that do not define widget of any kind this can
      be `None`, for example a plugin that only exposes a configuration page.

      .. versionadded:: 1.0.0 


   ..    .. .. py:attribute:: CONF_SECTION
      :type: pyllo.core.dtype.SectionName

      Name of the configuration section that's going to be
      used to record the plugin's permanent data in Pyllo
      config system (i.e. in pyllo.ini)

      .. versionadded:: 1.0.0


   ..    .. .. py:attribute:: CONF_FILE
      :value: True

      Use a separate configuration file for the plugin.

      .. versionadded:: 1.0.0


   ..    .. .. py:attribute:: CONF_DEFAULTS
      :type: pyllo.core.dtype.Configurations

      Define configuration defaults if using a separate file.
      List of tuples, with the first item in the tuple being the section
      name and the second item being the default options dictionary.

      .. example::

          CONF_DEFAULTS = [
              ('section-name', {'option-1': 'some-value',
                                'option-2': True,}),
              ('another-section-name', {'option-3': 'some-other-value',
                                        'option-4': [1, 2, 3],}),
          ]

      .. versionadded:: 1.0.0


   ..    .. .. py:attribute:: CONF_NAME_MAP
      :type: pyllo.core.dtype.FileConfigNameMap

      Define configuration name map for plugin to split configuration among 
      several files. See Pyllo/config/main.py

      .. versionadded:: 1.0.0


   ..    .. .. py:attribute:: CONF_VERSION

      Define configuration version if using a separate file

      IMPORTANT NOTES:
      1. If you want to *change* the default value of a current option, you
         need to do a MINOR update in config version, e.g. from 3.0.0 to 3.1.0
      2. If you want to *remove* options that are no longer needed or if you
         want to *rename* options, then you need to do a MAJOR update in
         version, e.g. from 3.0.0 to 4.0.0
      3. You don't need to touch this value if you're just adding a new option

      .. versionadded:: 1.0.0


   ..    .. .. py:attribute:: CONF_WIDGET_CLASS

      Widget to be used as entry in Pyllo Preferences dialog.


   ..    .. .. py:attribute:: FONT_SIZE_DELTA
      :value: 0

      Control the font size relative to the global fonts defined in Pyllo.


   ..    .. .. py:attribute:: RICH_FONT_SIZE_DELTA
      :value: 0

      Rich font size delta used to adjust font size for this plugin and without 
      affecting the font size of other elements in the application or system.


   ..    .. .. py:attribute:: NAMESPACE
      :type: pyllo.core.dtype.Registry2ndNamespace

      The UI namespace serves as a container or registry where plugins can store 
      their actions, toolbars, tool buttons, menus, and other UI components. It 
      provides a way for the plugin to define and manage its own UI elements 
      within the application's overall UI structure.

      By using the UI Namespace, plugins can avoid naming conflicts with other 
      plugins or the core application, and they can fetch and access their UI 
      components within their own scope.

      .. versionadded:: 1.0.0


   ..    .. .. py:attribute:: sigFreeMemoryRequested

      This signal can be emitted to request the main application to garbage
      collect deleted objects.

      .. versionadded:: 1.0.0


   ..    .. .. py:attribute:: sigQuitRequested

      This signal can be emitted to request the main application to quit.

      .. versionadded:: 1.0.0


   ..    .. .. py:attribute:: sigRestartRequested

      This signal can be emitted to request the main application to restart.

      .. versionadded:: 1.0.0


   ..    .. .. py:attribute:: sigStatusMessageRequested

      This signal can be emitted to request the main application to display a
      message in the status bar.

      Parameters
      ----------
      message: str
          The actual message to display.
      timeout: int
          The timeout before the message disappears.
          
      .. versionadded:: 1.0.0


   ..    .. .. py:attribute:: sigExceptionOccurred

      This signal can be emitted to report an exception from any plugin.

      Parameters
      ----------
      error_data: dict
          The dictionary containing error data. The expected keys are:
          >>> error_data= {
              "text": str,
              "isTraceback": bool,
              "repo": str,
              "title": str,
              "label": str,
              "steps": str,
          }

      Notes
      -----
      The `isTraceback` key indicates if `text` contains plain text or a
      Python error traceback.

      The `title` and `repo` keys indicate how the error data should
      customize the report dialog and Github error submission.

      The `label` and `steps` keys allow customizing the content of the
      error dialog.

      This signal is automatically connected to the main container/widget.

      .. versionadded:: 1.0.0


   ..    .. .. py:attribute:: sigMainwindowResized

      This signal is emitted when the main window is resized.

      Parameters
      ----------
      resize_event: QResizeEvent
          The event triggered on main window resize.

      Notes
      -----
      To be used by plugins tracking main window size changes.

      .. versionadded:: 1.0.0


   ..    .. .. py:attribute:: sigMainwindowMoved

      This signal is emitted when the main window is moved.

      Parameters
      ----------
      move_event: QMoveEvent
          The event triggered on main window move.

      Notes
      -----
      To be used by plugins tracking main window position changes.

      .. versionadded:: 1.0.0


   .. 
   .. rubric:: Overview

   
   .. list-table:: Attributes
      :header-rows: 0
      :widths: auto
      :class: summarytable

      * - :py:obj:`NAME <pyllo.core.api.IPlugin.NAME>`
        - Name of the plugin that will be used to refer to it.
      * - :py:obj:`VERSION <pyllo.core.api.IPlugin.VERSION>`
        - Plugin version.
      * - :py:obj:`REQUIRES <pyllo.core.api.IPlugin.REQUIRES>`
        - List of required plugin dependencies.
      * - :py:obj:`OPTIONAL <pyllo.core.api.IPlugin.OPTIONAL>`
        - List of optional plugin dependencies.
      * - :py:obj:`CONTAINER_CLASS <pyllo.core.api.IPlugin.CONTAINER_CLASS>`
        - This must subclass a `PluginMainContainer` for non dockable plugins that
      * - :py:obj:`CONF_SECTION <pyllo.core.api.IPlugin.CONF_SECTION>`
        - Name of the configuration section that's going to be
      * - :py:obj:`CONF_FILE <pyllo.core.api.IPlugin.CONF_FILE>`
        - Use a separate configuration file for the plugin.
      * - :py:obj:`CONF_DEFAULTS <pyllo.core.api.IPlugin.CONF_DEFAULTS>`
        - Define configuration defaults if using a separate file.
      * - :py:obj:`CONF_NAME_MAP <pyllo.core.api.IPlugin.CONF_NAME_MAP>`
        - Define configuration name map for plugin to split configuration among
      * - :py:obj:`CONF_VERSION <pyllo.core.api.IPlugin.CONF_VERSION>`
        - Define configuration version if using a separate file
      * - :py:obj:`CONF_WIDGET_CLASS <pyllo.core.api.IPlugin.CONF_WIDGET_CLASS>`
        - Widget to be used as entry in Pyllo Preferences dialog.
      * - :py:obj:`FONT_SIZE_DELTA <pyllo.core.api.IPlugin.FONT_SIZE_DELTA>`
        - Control the font size relative to the global fonts defined in Pyllo.
      * - :py:obj:`RICH_FONT_SIZE_DELTA <pyllo.core.api.IPlugin.RICH_FONT_SIZE_DELTA>`
        - Rich font size delta used to adjust font size for this plugin and without
      * - :py:obj:`NAMESPACE <pyllo.core.api.IPlugin.NAMESPACE>`
        - The UI namespace serves as a container or registry where plugins can store
      * - :py:obj:`sigFreeMemoryRequested <pyllo.core.api.IPlugin.sigFreeMemoryRequested>`
        - This signal can be emitted to request the main application to garbage
      * - :py:obj:`sigQuitRequested <pyllo.core.api.IPlugin.sigQuitRequested>`
        - This signal can be emitted to request the main application to quit.
      * - :py:obj:`sigRestartRequested <pyllo.core.api.IPlugin.sigRestartRequested>`
        - This signal can be emitted to request the main application to restart.
      * - :py:obj:`sigStatusMessageRequested <pyllo.core.api.IPlugin.sigStatusMessageRequested>`
        - This signal can be emitted to request the main application to display a
      * - :py:obj:`sigExceptionOccurred <pyllo.core.api.IPlugin.sigExceptionOccurred>`
        - This signal can be emitted to report an exception from any plugin.
      * - :py:obj:`sigMainwindowResized <pyllo.core.api.IPlugin.sigMainwindowResized>`
        - This signal is emitted when the main window is resized.
      * - :py:obj:`sigMainwindowMoved <pyllo.core.api.IPlugin.sigMainwindowMoved>`
        - This signal is emitted when the main window is moved.



   .. list-table:: Methods
      :header-rows: 0
      :widths: auto
      :class: summarytable

      * - :py:obj:`getPath <pyllo.core.api.IPlugin.getPath>`\ ()
        - Return the plugin's system path.
      * - :py:obj:`getContainer <pyllo.core.api.IPlugin.getContainer>`\ ()
        - Return the plugin main container.
      * - :py:obj:`getMainWindow <pyllo.core.api.IPlugin.getMainWindow>`\ ()
        - Return the Pyllo main window..
      * - :py:obj:`getApp <pyllo.core.api.IPlugin.getApp>`\ ()
        - Return the PylloApp.
      * - :py:obj:`getPlugin <pyllo.core.api.IPlugin.getPlugin>`\ (name)
        - Return a plugin instance by providing the plugin's NAME.
      * - :py:obj:`isPluginAvailable <pyllo.core.api.IPlugin.isPluginAvailable>`\ (name)
        - Determine if a given plugin is available.
      * - :py:obj:`applyConf <pyllo.core.api.IPlugin.applyConf>`\ (optionsSet)
        - :summarylabel:`abc` Apply `optionsSet` to this plugin's widget now.
      * - :py:obj:`showStatusMessage <pyllo.core.api.IPlugin.showStatusMessage>`\ (message, timeout)
        - Show message in status bar.
      * - :py:obj:`beforeLongProcess <pyllo.core.api.IPlugin.beforeLongProcess>`\ (message)
        - Show a message in main window's status bar and change the mouse
      * - :py:obj:`afterLongProcess <pyllo.core.api.IPlugin.afterLongProcess>`\ (message)
        - Clear main window's status bar after a long process and restore
      * - :py:obj:`createIcon <pyllo.core.api.IPlugin.createIcon>`\ (name)
        - :summarylabel:`static` Provide icons from the theme and icon manager.
      * - :py:obj:`getFont <pyllo.core.api.IPlugin.getFont>`\ (richText)
        - :summarylabel:`class` Return plain or rich text font used in Pyllo.
      * - :py:obj:`getName <pyllo.core.api.IPlugin.getName>`\ ()
        - :summarylabel:`abc` Return the plugin localized name.
      * - :py:obj:`getDescription <pyllo.core.api.IPlugin.getDescription>`\ ()
        - :summarylabel:`static` Return the plugin localized description.
      * - :py:obj:`getIcon <pyllo.core.api.IPlugin.getIcon>`\ ()
        - :summarylabel:`abc` Return the plugin associated icon.
      * - :py:obj:`initialize <pyllo.core.api.IPlugin.initialize>`\ ()
        - Initialize a plugin instance.
      * - :py:obj:`onInitialize <pyllo.core.api.IPlugin.onInitialize>`\ ()
        - :summarylabel:`abc` Setup the plugin.
      * - :py:obj:`checkCompatibility <pyllo.core.api.IPlugin.checkCompatibility>`\ ()
        - This method can be reimplemented to check compatibility of a plugin
      * - :py:obj:`beforeMainwindowVisible <pyllo.core.api.IPlugin.beforeMainwindowVisible>`\ ()
        - Actions to be performed after setup but before the main window's has
      * - :py:obj:`onMainwindowVisible <pyllo.core.api.IPlugin.onMainwindowVisible>`\ ()
        - Actions to be performed after the main window's has been shown.
      * - :py:obj:`onTearDown <pyllo.core.api.IPlugin.onTearDown>`\ (cancelable)
        - Perform actions when plugin teardown which is called before the main
      * - :py:obj:`isReadyForTeardown <pyllo.core.api.IPlugin.isReadyForTeardown>`\ ()
        - Determine if a plugin can be removed.
      * - :py:obj:`beforeMainWidgetContainerSetup <pyllo.core.api.IPlugin.beforeMainWidgetContainerSetup>`\ ()
        - Perform necessary operations before setting up the container.



   .. rubric:: Attributes
   .. py:attribute:: NAME
      :type: pyllo.core.dtype.PluginName

      Name of the plugin that will be used to refer to it.
      This name must be unique and will only be loaded once.

      .. versionadded:: 1.0.0


   .. py:attribute:: VERSION
      :value: '0.0.0'

      Plugin version.

      .. versionadded:: 1.0.0


   .. py:attribute:: REQUIRES
      :type: List[pyllo.core.dtype.PluginName]
      :value: []

      List of required plugin dependencies.
      Example: [Plugins.Plots, Plugins.IPythonConsole, ...].
      These values are defined in the `Plugins` class present in this file.
      If a plugin is using a widget from another plugin, that other
      must be declared as a required dependency.

      .. versionadded:: 1.0.0


   .. py:attribute:: OPTIONAL
      :type: List[pyllo.core.dtype.PluginName]
      :value: []

      List of optional plugin dependencies.
      Example: [Plugins.Plots, Plugins.IPythonConsole, ...].
      These values are defined in the `Plugins` class present in this file.
      A plugin might be performing actions when connecting to other plugins,
      but the main functionality of the plugin does not depend on other
      plugins. For example, the Help plugin might render information from
      the Editor or from the Console or from another source, but it does not
      depend on either of those plugins.
      Methods in the plugin that make use of optional plugins must check
      existence before using those methods or applying signal connections.

      .. versionadded:: 1.0.0


   .. py:attribute:: CONTAINER_CLASS
      :type: PluginMainContainer

      This must subclass a `PluginMainContainer` for non dockable plugins that
      create a widget, like a status bar widget, a toolbar, a menu, etc.
      For non dockable plugins that do not define widget of any kind this can
      be `None`, for example a plugin that only exposes a configuration page.

      .. versionadded:: 1.0.0 


   .. py:attribute:: CONF_SECTION
      :type: pyllo.core.dtype.SectionName

      Name of the configuration section that's going to be
      used to record the plugin's permanent data in Pyllo
      config system (i.e. in pyllo.ini)

      .. versionadded:: 1.0.0


   .. py:attribute:: CONF_FILE
      :value: True

      Use a separate configuration file for the plugin.

      .. versionadded:: 1.0.0


   .. py:attribute:: CONF_DEFAULTS
      :type: pyllo.core.dtype.Configurations

      Define configuration defaults if using a separate file.
      List of tuples, with the first item in the tuple being the section
      name and the second item being the default options dictionary.

      .. example::

          CONF_DEFAULTS = [
              ('section-name', {'option-1': 'some-value',
                                'option-2': True,}),
              ('another-section-name', {'option-3': 'some-other-value',
                                        'option-4': [1, 2, 3],}),
          ]

      .. versionadded:: 1.0.0


   .. py:attribute:: CONF_NAME_MAP
      :type: pyllo.core.dtype.FileConfigNameMap

      Define configuration name map for plugin to split configuration among 
      several files. See Pyllo/config/main.py

      .. versionadded:: 1.0.0


   .. py:attribute:: CONF_VERSION

      Define configuration version if using a separate file

      IMPORTANT NOTES:
      1. If you want to *change* the default value of a current option, you
         need to do a MINOR update in config version, e.g. from 3.0.0 to 3.1.0
      2. If you want to *remove* options that are no longer needed or if you
         want to *rename* options, then you need to do a MAJOR update in
         version, e.g. from 3.0.0 to 4.0.0
      3. You don't need to touch this value if you're just adding a new option

      .. versionadded:: 1.0.0


   .. py:attribute:: CONF_WIDGET_CLASS

      Widget to be used as entry in Pyllo Preferences dialog.


   .. py:attribute:: FONT_SIZE_DELTA
      :value: 0

      Control the font size relative to the global fonts defined in Pyllo.


   .. py:attribute:: RICH_FONT_SIZE_DELTA
      :value: 0

      Rich font size delta used to adjust font size for this plugin and without 
      affecting the font size of other elements in the application or system.


   .. py:attribute:: NAMESPACE
      :type: pyllo.core.dtype.Registry2ndNamespace

      The UI namespace serves as a container or registry where plugins can store 
      their actions, toolbars, tool buttons, menus, and other UI components. It 
      provides a way for the plugin to define and manage its own UI elements 
      within the application's overall UI structure.

      By using the UI Namespace, plugins can avoid naming conflicts with other 
      plugins or the core application, and they can fetch and access their UI 
      components within their own scope.

      .. versionadded:: 1.0.0


   .. py:attribute:: sigFreeMemoryRequested

      This signal can be emitted to request the main application to garbage
      collect deleted objects.

      .. versionadded:: 1.0.0


   .. py:attribute:: sigQuitRequested

      This signal can be emitted to request the main application to quit.

      .. versionadded:: 1.0.0


   .. py:attribute:: sigRestartRequested

      This signal can be emitted to request the main application to restart.

      .. versionadded:: 1.0.0


   .. py:attribute:: sigStatusMessageRequested

      This signal can be emitted to request the main application to display a
      message in the status bar.

      Parameters
      ----------
      message: str
          The actual message to display.
      timeout: int
          The timeout before the message disappears.
          
      .. versionadded:: 1.0.0


   .. py:attribute:: sigExceptionOccurred

      This signal can be emitted to report an exception from any plugin.

      Parameters
      ----------
      error_data: dict
          The dictionary containing error data. The expected keys are:
          >>> error_data= {
              "text": str,
              "isTraceback": bool,
              "repo": str,
              "title": str,
              "label": str,
              "steps": str,
          }

      Notes
      -----
      The `isTraceback` key indicates if `text` contains plain text or a
      Python error traceback.

      The `title` and `repo` keys indicate how the error data should
      customize the report dialog and Github error submission.

      The `label` and `steps` keys allow customizing the content of the
      error dialog.

      This signal is automatically connected to the main container/widget.

      .. versionadded:: 1.0.0


   .. py:attribute:: sigMainwindowResized

      This signal is emitted when the main window is resized.

      Parameters
      ----------
      resize_event: QResizeEvent
          The event triggered on main window resize.

      Notes
      -----
      To be used by plugins tracking main window size changes.

      .. versionadded:: 1.0.0


   .. py:attribute:: sigMainwindowMoved

      This signal is emitted when the main window is moved.

      Parameters
      ----------
      move_event: QMoveEvent
          The event triggered on main window move.

      Notes
      -----
      To be used by plugins tracking main window position changes.

      .. versionadded:: 1.0.0




   .. rubric:: Methods
   .. py:method:: getPath() -> pyllo.core.dtype.DirName

      Return the plugin's system path.

      .. versionadded:: 1.0.0


   .. py:method:: getContainer() -> CONTAINER_CLASS

      Return the plugin main container.

      .. versionadded:: 1.0.0


   .. py:method:: getMainWindow() -> MainWindow

      Return the Pyllo main window..

      .. versionadded:: 1.0.0


   .. py:method:: getApp() -> PyllApp

      Return the PylloApp.

      .. versionadded:: 1.0.0


   .. py:method:: getPlugin(name: pyllo.core.dtype.PluginName) -> Union[IPlugin, IDockablePlugin]

      Return a plugin instance by providing the plugin's NAME.

      .. versionadded:: 1.0.0


   .. py:method:: isPluginAvailable(name: str) -> bool

      Determine if a given plugin is available.

      .. versionadded:: 1.0.0


   .. py:method:: applyConf(optionsSet)
      :abstractmethod:

      Apply `optionsSet` to this plugin's widget now.

      .. versionadded:: 1.0.0


   .. py:method:: showStatusMessage(message: pyllo.core.dtype.Text, timeout=0)

      Show message in status bar.

      Parameters
      ----------
      message: str
          Message to display in the status bar.
      timeout: int
          Amount of time to display the message.


      .. versionadded:: 1.0.0


   .. py:method:: beforeLongProcess(message: pyllo.core.dtype.Text)

      Show a message in main window's status bar and change the mouse
      pointer to Qt.WaitCursor when starting a long process.

      Parameters
      ----------
      message: str
          Message to show in the status bar when the long process starts.


      .. versionadded:: 1.0.0


   .. py:method:: afterLongProcess(message: pyllo.core.dtype.Text = '')

      Clear main window's status bar after a long process and restore
      mouse pointer to the OS default.

      Parameters
      ----------
      message: str
          Message to show in the status bar when the long process finishes.


      .. versionadded:: 1.0.0


   .. py:method:: createIcon(name) -> qtpy.QtGui.QIcon
      :staticmethod:

      Provide icons from the theme and icon manager.

      .. versionadded:: 1.0.0


   .. py:method:: getFont(richText=False) -> qtpy.QtGui.QFont
      :classmethod:

      Return plain or rich text font used in Pyllo.

      Parameters
      ----------
      richText: bool
          Return rich text font (i.e. the one used in the Help pane)
          or plain text one (i.e. the one used in the Editor).

      Returns
      -------
      QFont
          QFont object to be passed to other Qt widget.

      Notes
      -----
      All plugins in Pyllo use the same, global font. This is a convenience
      method in case some plugins want to use a delta size based on the
      default one. That can be controlled by using FONT_SIZE_DELTA.


      .. versionadded:: 1.0.0


   .. py:method:: getName() -> pyllo.core.dtype.Text
      :abstractmethod:

      Return the plugin localized name.

      Returns
      -------
      str
          Localized name of the plugin.

      Notes
      -----
      This is a method to be able to update localization without a restart.


      .. versionadded:: 1.0.0


   .. py:method:: getDescription() -> pyllo.core.dtype.Text
      :staticmethod:

      Return the plugin localized description.

      Returns
      -------
      str
          Localized description of the plugin.

      Notes
      -----
      This is a method to be able to update localization without a restart.


      .. versionadded:: 1.0.0


   .. py:method:: getIcon() -> qtpy.QtGui.QIcon
      :abstractmethod:

      Return the plugin associated icon.

      Returns
      -------
      QIcon
          QIcon instance


      .. versionadded:: 1.0.0


   .. py:method:: initialize()

      Initialize a plugin instance.

      Notes
      -----
      This method should be called to initialize the plugin, but it should
      not be override, since it internally calls `onInitialize` and emits
      the `sigPluginReady` signal.


      .. versionadded:: 1.0.0


   .. py:method:: onInitialize()
      :abstractmethod:

      Setup the plugin.

      .. caution:: All calls performed on this method should not
          call other plugins.
      .. versionadded:: 1.0.0


   .. py:method:: checkCompatibility() -> Tuple[bool, pyllo.core.dtype.Text]

      This method can be reimplemented to check compatibility of a plugin
      with the user's current environment.

      Returns
      -------
      (bool, str)
          The first value tells Pyllo if the plugin has passed the
          compatibility test defined in this method. The second value
          is a message that must explain users why the plugin was
          found to be incompatible (e.g. 'This plugin does not work
          with PyQt4'). It will be shown at startup in a QMessageBox.


      .. versionadded:: 1.0.0


   .. py:method:: beforeMainwindowVisible()

      Actions to be performed after setup but before the main window's has
      been shown.

      .. versionadded:: 1.0.0


   .. py:method:: onMainwindowVisible()

      Actions to be performed after the main window's has been shown.

      .. versionadded:: 1.0.0


   .. py:method:: onTearDown(cancelable=False)

      Perform actions when plugin teardown which is called before the main
      window is closed.

      Returns
      -------
      bool
          Whether the plugin may be closed immediately or not.

      Notes
      -----
      The returned value is ignored if *cancelable* is False.


      .. versionadded:: 1.0.0


   .. py:method:: isReadyForTeardown() -> bool

      Determine if a plugin can be removed.

      Returns
      -------
      close: bool
          True if the plugin can be removed now, False otherwise.


      .. versionadded:: 1.0.0


   .. py:method:: beforeMainWidgetContainerSetup()

      Perform necessary operations before setting up the container.

      This must be reimplemented by plugins whose containers emit signals in
      onOptionUpdate that need to be connected before applying those
      options to our config system.

      .. versionadded:: 1.0.0





.. py:class:: IDockablePlugin

   Bases: :py:obj:`IPlugin`

   A Pyllo plugin to enhance functionality with a dockable widget.

   .. versionadded:: 1.0.0

   ..    ..    .. .. py:property:: dockWidget
      :type: PylloDockWidget

      Dock widget.

      .. versionadded:: 1.0.0


   ..    .. .. py:property:: toggleViewAction
      :type: PylloAction

      Toggle view action.

      .. versionadded:: 1.0.0


   ..    ..    .. .. py:attribute:: WIDGET_CLASS
      :type: PylloMainWidget

      This is the main widget of the dockable plugin.
      It needs to be a subclass of PluginMainWidget.

      .. versionadded:: 1.0.0


   ..    .. .. py:attribute:: sigToggleViewChanged

      This action is emitted to inform the visibility of a dockable plugin has 
      changed.

      This is triggered by checking/unchecking the entry for a pane in the
      `View > Panes` menu.

      Parameters
      ----------
      visible: bool
          New visibility of the dockWidget.
          
      .. versionadded:: 1.0.0


   ..    .. .. py:attribute:: sigRaisePaneRequested

      This signal can be emitted to inform the main window to raises this plugin 
      to view (if it's hidden) and gives  it focus (if possible).

      Parameters
      ----------
      (IDockablePlugin, Raise)

      Notes
      -----
      This is automatically connected to main container/widget at plugin's 
      registration.

      .. versionadded:: 1.0.0


   .. 
   .. rubric:: Overview

   
   .. list-table:: Attributes
      :header-rows: 0
      :widths: auto
      :class: summarytable

      * - :py:obj:`WIDGET_CLASS <pyllo.core.api.IDockablePlugin.WIDGET_CLASS>`
        - This is the main widget of the dockable plugin.
      * - :py:obj:`sigToggleViewChanged <pyllo.core.api.IDockablePlugin.sigToggleViewChanged>`
        - This action is emitted to inform the visibility of a dockable plugin has
      * - :py:obj:`sigRaisePaneRequested <pyllo.core.api.IDockablePlugin.sigRaisePaneRequested>`
        - This signal can be emitted to inform the main window to raises this plugin


   .. list-table:: Properties
      :header-rows: 0
      :widths: auto
      :class: summarytable

      * - :py:obj:`dockWidget <pyllo.core.api.IDockablePlugin.dockWidget>`
        - Dock widget.
      * - :py:obj:`toggleViewAction <pyllo.core.api.IDockablePlugin.toggleViewAction>`
        - Toggle view action.


   .. list-table:: Methods
      :header-rows: 0
      :widths: auto
      :class: summarytable

      * - :py:obj:`getWidget <pyllo.core.api.IDockablePlugin.getWidget>`\ ()
        - Return the plugin main widget.
      * - :py:obj:`updateMargins <pyllo.core.api.IDockablePlugin.updateMargins>`\ (margin)
        - Update margins of main widget inside dockable plugin.
      * - :py:obj:`raisePane <pyllo.core.api.IDockablePlugin.raisePane>`\ (forceFocus)
        - Raises this plugin to view (if it's hidden) and gives it focus (if
      * - :py:obj:`closeWindow <pyllo.core.api.IDockablePlugin.closeWindow>`\ ()
        - Close dockable window.
      * - :py:obj:`changeVisibility <pyllo.core.api.IDockablePlugin.changeVisibility>`\ (state, forceFocus)
        - Dock widget visibility has changed.
      * - :py:obj:`toggleView <pyllo.core.api.IDockablePlugin.toggleView>`\ (visible)
        - Toggle dock widget's visibility when its entry is selected in



   .. rubric:: Attributes
   .. py:attribute:: WIDGET_CLASS
      :type: PylloMainWidget

      This is the main widget of the dockable plugin.
      It needs to be a subclass of PluginMainWidget.

      .. versionadded:: 1.0.0


   .. py:attribute:: sigToggleViewChanged

      This action is emitted to inform the visibility of a dockable plugin has 
      changed.

      This is triggered by checking/unchecking the entry for a pane in the
      `View > Panes` menu.

      Parameters
      ----------
      visible: bool
          New visibility of the dockWidget.
          
      .. versionadded:: 1.0.0


   .. py:attribute:: sigRaisePaneRequested

      This signal can be emitted to inform the main window to raises this plugin 
      to view (if it's hidden) and gives  it focus (if possible).

      Parameters
      ----------
      (IDockablePlugin, Raise)

      Notes
      -----
      This is automatically connected to main container/widget at plugin's 
      registration.

      .. versionadded:: 1.0.0



   .. rubric:: Properties
   .. py:property:: dockWidget
      :type: PylloDockWidget

      Dock widget.

      .. versionadded:: 1.0.0


   .. py:property:: toggleViewAction
      :type: PylloAction

      Toggle view action.

      .. versionadded:: 1.0.0



   .. rubric:: Methods
   .. py:method:: getWidget() -> PluginMainWidget

      Return the plugin main widget.

      .. versionadded:: 1.0.0


   .. py:method:: updateMargins(margin: int)

      Update margins of main widget inside dockable plugin.

      .. versionadded:: 1.0.0


   .. py:method:: raisePane(forceFocus=False)

      Raises this plugin to view (if it's hidden) and gives it focus (if
      possible).

      .. versionadded:: 1.0.0


   .. py:method:: closeWindow()

      Close dockable window.

      .. versionadded:: 1.0.0


   .. py:method:: changeVisibility(state: bool, forceFocus=False)

      Dock widget visibility has changed.

      .. versionadded:: 1.0.0


   .. py:method:: toggleView(visible: bool)

      Toggle dock widget's visibility when its entry is selected in
      the menu `View > Panes`.

      Parameters
      ----------
      visible: bool
          Set view visible or not.

      Notes
      -----
      If you need to attach some functionality when this changes, use
      sigToggleViewChanged.

      .. versionadded:: 1.0.0





.. py:class:: IUndoable

   Bases: :py:obj:`object`

   Undoable behavior interface

   ..    ..    ..    .. .. py:attribute:: sigUndoAvailable

      Emitted when undo is available or not.

      .. versionadded:: 1.0.0


   ..    .. .. py:attribute:: sigRedoAvailable

      Emitted when redo is available or not.

      .. versionadded:: 1.0.0


   .. 
   .. rubric:: Overview

   
   .. list-table:: Attributes
      :header-rows: 0
      :widths: auto
      :class: summarytable

      * - :py:obj:`sigUndoAvailable <pyllo.core.api.IUndoable.sigUndoAvailable>`
        - Emitted when undo is available or not.
      * - :py:obj:`sigRedoAvailable <pyllo.core.api.IUndoable.sigRedoAvailable>`
        - Emitted when redo is available or not.



   .. list-table:: Methods
      :header-rows: 0
      :widths: auto
      :class: summarytable

      * - :py:obj:`isRedoAvailable <pyllo.core.api.IUndoable.isRedoAvailable>`\ ()
        - :summarylabel:`abc` Return ture if redo is availbale.
      * - :py:obj:`isUndoAvailable <pyllo.core.api.IUndoable.isUndoAvailable>`\ ()
        - :summarylabel:`abc` Return ture if undo is availbale.
      * - :py:obj:`redo <pyllo.core.api.IUndoable.redo>`\ ()
        - :summarylabel:`abc` Redo.
      * - :py:obj:`undo <pyllo.core.api.IUndoable.undo>`\ ()
        - :summarylabel:`abc` Undo.
      * - :py:obj:`clearUndo <pyllo.core.api.IUndoable.clearUndo>`\ ()
        - :summarylabel:`abc` Clear undo.



   .. rubric:: Attributes
   .. py:attribute:: sigUndoAvailable

      Emitted when undo is available or not.

      .. versionadded:: 1.0.0


   .. py:attribute:: sigRedoAvailable

      Emitted when redo is available or not.

      .. versionadded:: 1.0.0




   .. rubric:: Methods
   .. py:method:: isRedoAvailable() -> bool
      :abstractmethod:

      Return ture if redo is availbale.

      .. versionadded:: 1.0.0


   .. py:method:: isUndoAvailable() -> bool
      :abstractmethod:

      Return ture if undo is availbale.

      .. versionadded:: 1.0.0


   .. py:method:: redo()
      :abstractmethod:

      Redo.

      .. versionadded:: 1.0.0


   .. py:method:: undo()
      :abstractmethod:

      Undo.

      .. versionadded:: 1.0.0


   .. py:method:: clearUndo()
      :abstractmethod:

      Clear undo.

      .. versionadded:: 1.0.0





