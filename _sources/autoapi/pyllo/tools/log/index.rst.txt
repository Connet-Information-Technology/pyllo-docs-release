:py:mod:`pyllo.tools.log`
=========================

.. py:module:: pyllo.tools.log

.. autoapi-nested-parse::

   This is a modified version of log module originally used in debugpy



Module Contents
---------------


.. list-table:: Classes
   :header-rows: 0
   :widths: auto
   :class: summarytable

   * - :py:obj:`LogFile <pyllo.tools.log.LogFile>`
     - \-
   * - :py:obj:`NoLog <pyllo.tools.log.NoLog>`
     - \-


.. list-table:: Functions
   :header-rows: 0
   :widths: auto
   :class: summarytable

   * - :py:obj:`evaluate <pyllo.tools.log.evaluate>`\ (code, path)
     - \-
   * - :py:obj:`nameof <pyllo.tools.log.nameof>`\ (obj, quote)
     - Returns the most descriptive name of a Python module, class, or function,
   * - :py:obj:`srcnameof <pyllo.tools.log.srcnameof>`\ (obj)
     - Returns the most descriptive name of a Python module, class, or function,
   * - :py:obj:`newline <pyllo.tools.log.newline>`\ (level)
     - \-
   * - :py:obj:`write <pyllo.tools.log.write>`\ (level, text, _to_files)
     - \-
   * - :py:obj:`write_format <pyllo.tools.log.write_format>`\ (level, format_string, \*args, \*\*kwargs)
     - \-
   * - :py:obj:`error <pyllo.tools.log.error>`\ (\*args, \*\*kwargs)
     - Logs an error.
   * - :py:obj:`swallow_exception <pyllo.tools.log.swallow_exception>`\ (format_string, \*args, \*\*kwargs)
     - Logs an exception with full traceback.
   * - :py:obj:`reraise_exception <pyllo.tools.log.reraise_exception>`\ (format_string, \*args, \*\*kwargs)
     - Like swallow_exception(), but re-raises the current exception after logging it.
   * - :py:obj:`to_file <pyllo.tools.log.to_file>`\ (filename, prefix, levels)
     - Starts logging all messages at the specified levels to the designated file.
   * - :py:obj:`prefixed <pyllo.tools.log.prefixed>`\ (format_string, \*args, \*\*kwargs)
     - Adds a prefix to all messages logged from the current thread for the duration
   * - :py:obj:`describe_environment <pyllo.tools.log.describe_environment>`\ (header)
     - \-


.. list-table:: Attributes
   :header-rows: 0
   :widths: auto
   :class: summarytable

   * - :py:obj:`LEVELS <pyllo.tools.log.LEVELS>`
     - Logging levels, lowest to highest importance.
   * - :py:obj:`log_dir <pyllo.tools.log.log_dir>`
     - If not None, debugger logs its activity to a file named pyllo.*-<pid>.log
   * - :py:obj:`timestamp_format <pyllo.tools.log.timestamp_format>`
     - Format spec used for timestamps. Can be changed to dial precision up or down.
   * - :py:obj:`debug <pyllo.tools.log.debug>`
     - \-
   * - :py:obj:`info <pyllo.tools.log.info>`
     - \-
   * - :py:obj:`warning <pyllo.tools.log.warning>`
     - \-
   * - :py:obj:`stderr <pyllo.tools.log.stderr>`
     - \-


.. py:function:: evaluate(code, path=__file__)


.. py:function:: nameof(obj, quote=False)

   Returns the most descriptive name of a Python module, class, or function,
   as a Unicode string

   If quote=True, name is quoted with repr().

   Best-effort, but guaranteed to not fail - always returns something.


.. py:function:: srcnameof(obj)

   Returns the most descriptive name of a Python module, class, or function,
   including source information (filename and linenumber), if available.

   Best-effort, but guaranteed to not fail - always returns something.


.. py:data:: LEVELS
   :value: ('debug', 'info', 'warning', 'error')

   Logging levels, lowest to highest importance.


.. py:data:: log_dir

   If not None, debugger logs its activity to a file named pyllo.*-<pid>.log
   in the specified directory, where <pid> is the return value of os.getpid().


.. py:data:: timestamp_format
   :value: '09.3f'

   Format spec used for timestamps. Can be changed to dial precision up or down.


.. py:class:: LogFile(filename, file, levels=LEVELS, close_file=True)

   Bases: :py:obj:`object`

   ..    ..    .. .. py:property:: levels


   ..    .. 
   .. rubric:: Overview

   

   .. list-table:: Properties
      :header-rows: 0
      :widths: auto
      :class: summarytable

      * - :py:obj:`levels <pyllo.tools.log.LogFile.levels>`
        - \-


   .. list-table:: Methods
      :header-rows: 0
      :widths: auto
      :class: summarytable

      * - :py:obj:`write <pyllo.tools.log.LogFile.write>`\ (level, output)
        - \-
      * - :py:obj:`close <pyllo.tools.log.LogFile.close>`\ ()
        - \-




   .. rubric:: Properties
   .. py:property:: levels



   .. rubric:: Methods
   .. py:method:: write(level, output)


   .. py:method:: close()





.. py:class:: NoLog

   Bases: :py:obj:`object`

   ..    ..    .. 
   .. rubric:: Overview

   


   .. list-table:: Methods
      :header-rows: 0
      :widths: auto
      :class: summarytable

      * - :py:obj:`close <pyllo.tools.log.NoLog.close>`\ ()
        - \-





   .. rubric:: Methods
   .. py:method:: close()





.. py:function:: newline(level='info')


.. py:function:: write(level, text, _to_files=all)


.. py:function:: write_format(level, format_string, *args, **kwargs)


.. py:data:: debug

   

.. py:data:: info

   

.. py:data:: warning

   

.. py:function:: error(*args, **kwargs)

   Logs an error.

   Returns the output wrapped in AssertionError. Thus, the following::

       raise log.error(s, ...)

   has the same effect as::

       log.error(...)
       assert False, (s.format(...))


.. py:function:: swallow_exception(format_string='', *args, **kwargs)

   Logs an exception with full traceback.

   If format_string is specified, it is formatted with format(*args, **kwargs), and
   prepended to the exception traceback on a separate line.

   If exc_info is specified, the exception it describes will be logged. Otherwise,
   sys.exc_info() - i.e. the exception being handled currently - will be logged.

   If level is specified, the exception will be logged as a message of that level.
   The default is "error".


.. py:function:: reraise_exception(format_string='', *args, **kwargs)

   Like swallow_exception(), but re-raises the current exception after logging it.


.. py:function:: to_file(filename=None, prefix=None, levels=LEVELS)

   Starts logging all messages at the specified levels to the designated file.

   Either filename or prefix must be specified, but not both.

   If filename is specified, it designates the log file directly.

   If prefix is specified, the log file is automatically created in options.log_dir,
   with filename computed as prefix + os.getpid(). If log_dir is None, no log file
   is created, and the function returns immediately.

   If the file with the specified or computed name is already being used as a log
   file, it is not overwritten, but its levels are updated as specified.

   The function returns an object with a close() method. When the object is closed,
   logs are not written into that file anymore. Alternatively, the returned object
   can be used in a with-statement:

       with log.to_file("some.log"):
           # now also logging to some.log
       # not logging to some.log anymore


.. py:function:: prefixed(format_string, *args, **kwargs)

   Adds a prefix to all messages logged from the current thread for the duration
   of the context manager.


.. py:function:: describe_environment(header)


.. py:data:: stderr

   

